name: ChatApp CI/CD with Redis & Alembic

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  # ============================================
  # STAGE 1: Checkout & Setup
  # ============================================
  setup:
    name: "Stage 1: Checkout & Setup"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Set up Node.js 18
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Verify Setup
        run: |
          echo "Python version: $(python --version)"
          echo "Node version: $(node --version)"
          echo "npm version: $(npm --version)"

  # ============================================
  # STAGE 2: Load .env + Secrets & Install Dependencies
  # ============================================
  install-dependencies:
    name: "Stage 2: Install Dependencies"
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Load environment variables
        run: |
          set -o allexport
          source .env
          export POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
          export SECRET_KEY=${{ secrets.SECRET_KEY }}
          export REACT_APP_BACKEND_SERVICE_URL=${{ secrets.REACT_APP_BACKEND_SERVICE_URL }}
          export REACT_APP_WEBSOCKET_SERVICE_URL=${{ secrets.REACT_APP_WEBSOCKET_SERVICE_URL }}
          set +o allexport
          echo "✅ Environment variables loaded"

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc g++ python3-dev libpq-dev build-essential libjpeg-dev zlib1g-dev libffi-dev netcat-traditional

      - name: Install backend dependencies
        run: |
          cd services/backend
          python -m pip install --upgrade pip setuptools wheel
          pip install -r requirements.txt
          pip install pytest flake8 bandit safety pytest-cov
          echo "✅ Backend dependencies installed"

      - name: Install frontend dependencies
        run: |
          cd services/frontend
          npm install
          echo "✅ Frontend dependencies installed"

  # ============================================
  # STAGE 3: Lint & Security Scan
  # ============================================
  lint-and-security:
    name: "Stage 3: Lint & Security Scan"
    runs-on: ubuntu-latest
    needs: install-dependencies
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Load environment variables
        run: |
          set -o allexport
          source .env
          export POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
          export SECRET_KEY=${{ secrets.SECRET_KEY }}
          set +o allexport

      - name: Backend Lint - Flake8
        run: |
          cd services/backend
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics || true
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Backend Security Scan - Bandit
        run: |
          cd services/backend
          bandit -r . -ll || true

      - name: Backend Security - Dependency Check (Safety)
        run: |
          cd services/backend
          safety check || true

      - name: Frontend Lint - ESLint
        run: |
          cd services/frontend
          npx eslint . || true

      - name: Frontend Security - npm audit
        run: |
          cd services/frontend
          npm audit --audit-level=moderate || true

  # ============================================
  # STAGE 4: Test with PostgreSQL & Redis
  # ============================================
  test:
    name: "Stage 4: Test with PostgreSQL & Redis"
    runs-on: ubuntu-latest
    needs: lint-and-security
    services:
      db:
        image: postgres:15
        env:
          POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U ${{ secrets.POSTGRES_USER }} -d ${{ secrets.POSTGRES_DB }}"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Load environment variables
        run: |
          set -o allexport
          source .env
          export POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
          export SECRET_KEY=${{ secrets.SECRET_KEY }}
          set +o allexport

      - name: Wait for PostgreSQL
        run: |
          for i in {1..30}; do
            pg_isready -h localhost -p 5432 -U ${{ secrets.POSTGRES_USER }} && break
            sleep 2
          done

      - name: Wait for Redis
        run: |
          for i in {1..30}; do
            redis-cli -h localhost -p 6379 ping && break
            sleep 2
          done

      - name: Run backend tests
        run: |
          cd services/backend
          pytest tests/ -v --cov=. --cov-report=term-missing || true

      - name: Run frontend tests
        run: |
          cd services/frontend
          npm test -- --watchAll=false --passWithNoTests || true

  # ============================================
  # STAGE 5: Build Docker Images
  # ============================================
  docker-build:
    name: "Stage 5: Build Docker Images"
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Load environment variables
        run: |
          set -o allexport
          source .env
          export POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
          export SECRET_KEY=${{ secrets.SECRET_KEY }}
          set +o allexport

      - name: Build Docker images
        run: |
          docker compose -f docker-compose.yml build

      - name: Test Docker Compose stack
        run: |
          docker compose -f docker-compose.yml up -d
          docker compose -f docker-compose.yml ps
          docker compose -f docker-compose.yml logs --tail=20
          docker compose -f docker-compose.yml down

  # ============================================
  # STAGE 6: Deploy to Docker Hub
  # ============================================
  deploy:
    name: "Stage 6: Deploy to Docker Hub"
    runs-on: ubuntu-latest
    needs: docker-build
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Load environment variables
        run: |
          set -o allexport
          source .env
          export POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
          export SECRET_KEY=${{ secrets.SECRET_KEY }}
          set +o allexport

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Push Docker images
        run: |
          docker compose -f docker-compose.yml push
