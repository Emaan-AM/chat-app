name: ChatApp CI/CD

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

# ============================================
# STAGE 1: Checkout & Setup
# ============================================
jobs:
  setup:
    name: "Stage 1: Checkout & Setup"
    runs-on: ubuntu-latest
    steps:
      - name: "Checkout code"
        uses: actions/checkout@v3

      - name: "Set up Python 3.10"
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: "Set up Node.js"
        uses: actions/setup-node@v3
        with:
          node-version: '18'

# ============================================
# STAGE 2: Install Dependencies
# ============================================
  install-dependencies:
    name: "Stage 2: Install Dependencies"
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: "Checkout code"
        uses: actions/checkout@v3

      - name: "Install system dependencies for Pillow"
        run: |
          sudo apt-get update
          sudo apt-get install -y libjpeg-dev zlib1g-dev gcc g++ python3-dev

      - name: "Install backend dependencies"
        run: |
          cd services/backend
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest flake8

      - name: "Install frontend dependencies"
        run: |
          cd services/frontend
          npm install

# ============================================
# STAGE 3: Lint
# ============================================
  lint:
    name: "Stage 3: Lint"
    runs-on: ubuntu-latest
    needs: install-dependencies
    steps:
      - name: "Checkout code"
        uses: actions/checkout@v3

      - name: "Backend lint"
        run: |
          cd services/backend
          flake8 .

      - name: "Frontend lint"
        run: |
          cd services/frontend
          npx eslint .

# ============================================
# STAGE 4: Test
# ============================================
  test:
    name: "Stage 4: Test"
    runs-on: ubuntu-latest
    needs: lint
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: chatdb
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: verysecurepassword
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U postgres -d chatdb"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - name: "Checkout code"
        uses: actions/checkout@v3

      - name: "Run backend tests"
        env:
          POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          BACKEND_APP_SETTINGS: ${{ secrets.BACKEND_APP_SETTINGS }}
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
          PYTHONPATH: ${{ github.workspace }}/services/backend
        run: |
          cd services/backend
          pytest tests -v

      - name: "Create frontend .env from secrets"
        run: |
          echo "REACT_APP_BACKEND_SERVICE_URL=${{ secrets.REACT_APP_BACKEND_SERVICE_URL }}" > services/frontend/.env
          echo "REACT_APP_WEBSOCKET_SERVICE_URL=${{ secrets.REACT_APP_WEBSOCKET_SERVICE_URL }}" >> services/frontend/.env
          echo "NODE_ENV=development" >> services/frontend/.env

      - name: "Run frontend tests"
        run: |
          cd services/frontend
          npm test -- --watchAll=false

# ============================================
# STAGE 5: Docker Build & Deploy
# ============================================
  docker-deploy:
    name: "Stage 5: Docker Build & Deploy"
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: "Checkout code"
        uses: actions/checkout@v3

      - name: "Create .env for Docker Compose"
        run: |
          echo "POSTGRES_DB=${{ secrets.POSTGRES_DB }}" > .env
          echo "POSTGRES_USER=${{ secrets.POSTGRES_USER }}" >> .env
          echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" >> .env
          echo "SECRET_KEY=${{ secrets.SECRET_KEY }}" >> .env

      - name: "Build Docker images"
        run: docker compose -f docker-compose.yml build

      - name: "Login to Docker Hub"
        if: github.ref == 'refs/heads/main'
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: "Push Docker images"
        if: github.ref == 'refs/heads/main'
        run: docker compose -f docker-compose.yml push

      - name: "Show deployment logs"
        if: github.ref == 'refs/heads/main'
        run: |
          echo "=== DEPLOYMENT LOGS ==="
          echo "✅ Docker images successfully pushed to Docker Hub!"
          echo "📅 Timestamp: $(date -u)"
          echo "🔗 Docker Hub URL: https://hub.docker.com/r/${{ secrets.DOCKER_USERNAME }}"
          echo "📝 Commit SHA: ${{ github.sha }}"
          echo "🎯 Branch: ${{ github.ref }}"
          echo "🚀 Deployment completed successfully!"
